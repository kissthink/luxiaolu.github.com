title: The Str and Unicode object in python
tags: python, character encoding
# The Str and Unicode object in python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
python中的str和unicode
---

测试: 在windows的cmd下.
1.
\>>> a= "你好"
\>>> a
\xc4\xe3\xba\xc3'

2.
\>>> a= u"你好"
\>>> a
u'\u4f60\u597d'

3.
\>>> a= "你好"
\>>> a
\xc4\xe3\xba\xc3'
\>>> a.decode("gbk")
u'\u4f60\u597d'

python2中引号定义的字符串是 “str” 类型。
\>>> type("test"）
`<type 'str'>`
加一个字符u定义的是 “unicode” 类型。
\>>> type(u"test")
`<'type 'unicode'>`

str 类型的字符是由unicode编码后储存的，测试1中“你好”是gbk编码，测试3中用对应的解码方式解码后会变成unicode类型。

###问题一： 什么是字符编码
由于计算机内部储存数据只能是2进制格式，所以字符串只能编码后保存，最常见的就是**ascii**编码了。编码方式就是一张表，每个字符都有一个对应的二进制数，例如**ascii**编码，字符'a'对应的是 01100001。**ascii**编码字符集太小(只有128个字符)，就是那张表太小了，世界上各种语言，每种语言都有不同的字符集要想计算机保存和显示它们**ascii**编码就不够用了。

###问题二：什么是unicode
unicode 是个更大的字符集，可以容纳100多万个符号，每个字符依然有一个唯一的二进制数与之对应。

###问题三：unicode和utf-8，utf-16，utf-32的关系。

有了unicode，那么字符'a'在unicode中对应的二进制数是多少呢？答案还是01100001，只有八位，一个字节。而汉字“严”对应的二进制数是100111000100101，15位，那么就需要有两个字节来储存。   

那么一个字符到底该用几个字节来保存呢，有的符号对应的二进制数很大，甚至需要四个字节来保存，这也是为什么unicode可以容纳100多万个字符，排在表末尾的字符对应的二进制数自然大了。   

如果所有字符统一用四个字节来保存的话，那么一篇文章里如果只有英文字符的话，ascii编码就搞定了，ascii可是都只用一个字节就好了，这样岂不太浪费。ascii可没有这个烦人的问题。  

utf-8就是为了解决这个问题的！utf-8对unicode再进行编码，每个字符根据情况可以占不同的字节。那么计算机怎么知道比如三个字节到底是三个字符还是一个字符呢，utf-8怎么解决这个问题的呢？   

占一个字节的字符: 0xxxxxxx    
占两个字节的字符: 110xxxxx 10xxxxxx     
占三个字节的字符: 1110xxxx 10xxxxxx 10xxxxxx   
占四个字节的字符: 11110xxx 10xxxxxx 10xxxxxx    
可以看出，第一个字节前边110表示这个字符占两个字节，0xxx则表示就一个字节了。后边的字节前两个字符都是10。     

类似还有UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示）。

